//Text input (and other familiar inputs like email, tel and so on...)
.c-input {
  @include disableDefaults;
  width: 100%;
  max-width: 100%;
  transition: border 300ms;
  border: $textInputBorder;
  font-size: $textInputFontSize;
  padding-left: $textInputPadding;
  padding-right: $textInputPadding;
  height: $textInputHeight;
  color: $textInputColor;
  -moz-appearance: textfield;
  &:focus {
    border: $textInputBorderFocus;
    color: $textInputColorFocus;
  }
  &.error {
    border: $textInputBorderError;
    color: $textInputColorError;
  }
  &::-webkit-input-placeholder {
    color: $textInputColor;
  }
  &::-ms-clear {
    display: none;
  }
}

//form label
.c-label {
  display: block;
  margin-bottom: $labelMarginBottom;
}

//formError
.c-formError {
  margin-top: $errorMarginTop;
  margin-bottom: $errorMarginBottom;
  color: $errorColor;
}

//specific styles for select and textarea when using .c-input class
select.c-input {
  &[multiple] {
    @include ie() {
      padding-right: 0;
    }
  }
  &:not([multiple]) {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 6' fill='#{$selectArrowColor}'%3E%3Cpath d='M6 6L0 0h12L6 6z'/%3E%3C/svg%3E");
    background-repeat: no-repeat;
    background-size: $selectArrowWidth $selectArrowHeight;
    background-position: right $selectArrowRight top $selectArrowTop;
    padding-right: $selectArrowRight + $selectArrowWidth + $textInputPadding;
    &:focus {
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 12 6' fill='#{$selectArrowFocusColor}'%3E%3Cpath d='M6 6L0 0h12L6 6z'/%3E%3C/svg%3E");
    }
    &::-ms-value {
      background-color: transparent;
      color: inherit;
    }
  }
}

textarea.c-input {
  height: auto;
}

//Range input
.c-rangeInput {
  @include disableDefaults;
  padding: 0;
  width: 100%;
  background: transparent;
  &::-webkit-slider-thumb{
    -webkit-appearance: none;
    border: $rangeInputThumbBorderWidth solid $rangeInputThumbBorderColor;
    height: $rangeInputThumbHeight;
    width: $rangeInputThumbWidth;
    background-color: $rangeInputThumbBg;
    cursor: pointer;
    margin-top: - $rangeInputThumbHeight / 2 + $rangeInputThumbBorderWidth;
    border-radius: $rangeInputThumbBorderRadius;
    @include edge() {
      margin-top: 0;
    }
  }
  &::-webkit-slider-runnable-track {
    width: 100%;
    height: $rangeInputSliderHeight;
    cursor: pointer;
    background: $rangeInputSliderBg;
    border-radius: $rangeInputSliderHeight;
  }
  &::-ms-track {
    width: 100%;
    height: $rangeInputSliderHeight / 2;
    border-radius: $rangeInputSliderHeight;
    cursor: pointer;
    background: transparent;
    border: ($rangeInputThumbHeight - $rangeInputSliderHeight) / 2 solid transparent;
    border-left: 0;
    border-right: 0;
    color: transparent;
  }
  &::-ms-thumb {
    height: $rangeInputThumbHeight / 2;
    width: $rangeInputThumbWidth / 2;
    background-color: $rangeInputThumbBg;
    border-radius: $rangeInputThumbBorderRadius;
    cursor: pointer;
    border: $rangeInputThumbBorderWidth solid $rangeInputThumbBorderColor;
  }
  &::-ms-fill-lower {
    background: $rangeInputSliderBg;
    border-radius: $rangeInputSliderHeight;
  }
  &::-ms-fill-upper {
    background: $rangeInputSliderBg;
    border-radius: $rangeInputSliderHeight;
  }
  &::-moz-range-thumb {
    border: $rangeInputThumbBorderWidth solid $rangeInputThumbBorderColor;
    height: $rangeInputThumbHeight;
    width: $rangeInputThumbWidth;
    background-color: $rangeInputThumbBg;
    cursor: pointer;
    border-radius: $rangeInputThumbBorderRadius;
  }
  &::-moz-range-track {
    width: 100%;
    height: $rangeInputSliderHeight;
    cursor: pointer;
    background: $rangeInputSliderBg;
    border-radius: $rangeInputSliderHeight;
  }
}

//radio and checkbox inputs
.c-svgInput {
  position: relative;
  display: inline-block;
  width: $svgInputWidthHeight;
  height: $svgInputWidthHeight;
  svg {
    width: $svgInputWidthHeight;
    height: $svgInputWidthHeight;
    padding: $svgInputPadding;
    position: absolute;
    top: 0;
    left: 0;
    border: $svgInputBorder;
    border-radius: $svgInputBorderRadius;
    path,circle {
      opacity: 0;
      fill: $svgInputBg;
    }
  }
  label {
    display: inline-block;
    position: relative;
    cursor: pointer;
  }
  input {
    display: none;
    &:checked {
      &~label {
        svg {
          border: $svgInputCheckedBorder;
          background-color: $svgInputCheckedBg;
          path,circle {
            opacity: 1;
            fill: $svgInputCheckedColor;
          }
        }
      }
    }
  }
}

//buttons and button-like inputs
.c-button {
  @include disableDefaults;
  display: inline-block;
  padding: 0 $buttonPadding;
  line-height: $buttonHeight;
  text-align: center;
  background-color: $buttonBg;
  color: $buttonColor;
  font-size: $buttonFontSize;
  cursor: pointer;
}